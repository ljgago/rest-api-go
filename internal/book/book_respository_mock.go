// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package book

import (
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
// 	func TestSomethingThatUsesRepository(t *testing.T) {
//
// 		// make and configure a mocked Repository
// 		mockedRepository := &RepositoryMock{
// 			CreateFunc: func(book Book) (Book, error) {
// 				panic("mock out the Create method")
// 			},
// 			DeleteFunc: func(id int) error {
// 				panic("mock out the Delete method")
// 			},
// 			ReadFunc: func() ([]Book, error) {
// 				panic("mock out the Read method")
// 			},
// 			ReadOneFunc: func(id int) (Book, error) {
// 				panic("mock out the ReadOne method")
// 			},
// 			UpdateFunc: func(id int, book Book) (Book, error) {
// 				panic("mock out the Update method")
// 			},
// 		}
//
// 		// use mockedRepository in code that requires Repository
// 		// and then make assertions.
//
// 	}
type RepositoryMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(book Book) (Book, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(id int) error

	// ReadFunc mocks the Read method.
	ReadFunc func() ([]Book, error)

	// ReadOneFunc mocks the ReadOne method.
	ReadOneFunc func(id int) (Book, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(id int, book Book) (Book, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Book is the book argument value.
			Book Book
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// ID is the id argument value.
			ID int
		}
		// Read holds details about calls to the Read method.
		Read []struct {
		}
		// ReadOne holds details about calls to the ReadOne method.
		ReadOne []struct {
			// ID is the id argument value.
			ID int
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// ID is the id argument value.
			ID int
			// Book is the book argument value.
			Book Book
		}
	}
	lockCreate  sync.RWMutex
	lockDelete  sync.RWMutex
	lockRead    sync.RWMutex
	lockReadOne sync.RWMutex
	lockUpdate  sync.RWMutex
}

// Create calls CreateFunc.
func (mock *RepositoryMock) Create(book Book) (Book, error) {
	if mock.CreateFunc == nil {
		panic("RepositoryMock.CreateFunc: method is nil but Repository.Create was just called")
	}
	callInfo := struct {
		Book Book
	}{
		Book: book,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(book)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedRepository.CreateCalls())
func (mock *RepositoryMock) CreateCalls() []struct {
	Book Book
} {
	var calls []struct {
		Book Book
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *RepositoryMock) Delete(id int) error {
	if mock.DeleteFunc == nil {
		panic("RepositoryMock.DeleteFunc: method is nil but Repository.Delete was just called")
	}
	callInfo := struct {
		ID int
	}{
		ID: id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedRepository.DeleteCalls())
func (mock *RepositoryMock) DeleteCalls() []struct {
	ID int
} {
	var calls []struct {
		ID int
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Read calls ReadFunc.
func (mock *RepositoryMock) Read() ([]Book, error) {
	if mock.ReadFunc == nil {
		panic("RepositoryMock.ReadFunc: method is nil but Repository.Read was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRead.Lock()
	mock.calls.Read = append(mock.calls.Read, callInfo)
	mock.lockRead.Unlock()
	return mock.ReadFunc()
}

// ReadCalls gets all the calls that were made to Read.
// Check the length with:
//     len(mockedRepository.ReadCalls())
func (mock *RepositoryMock) ReadCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRead.RLock()
	calls = mock.calls.Read
	mock.lockRead.RUnlock()
	return calls
}

// ReadOne calls ReadOneFunc.
func (mock *RepositoryMock) ReadOne(id int) (Book, error) {
	if mock.ReadOneFunc == nil {
		panic("RepositoryMock.ReadOneFunc: method is nil but Repository.ReadOne was just called")
	}
	callInfo := struct {
		ID int
	}{
		ID: id,
	}
	mock.lockReadOne.Lock()
	mock.calls.ReadOne = append(mock.calls.ReadOne, callInfo)
	mock.lockReadOne.Unlock()
	return mock.ReadOneFunc(id)
}

// ReadOneCalls gets all the calls that were made to ReadOne.
// Check the length with:
//     len(mockedRepository.ReadOneCalls())
func (mock *RepositoryMock) ReadOneCalls() []struct {
	ID int
} {
	var calls []struct {
		ID int
	}
	mock.lockReadOne.RLock()
	calls = mock.calls.ReadOne
	mock.lockReadOne.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *RepositoryMock) Update(id int, book Book) (Book, error) {
	if mock.UpdateFunc == nil {
		panic("RepositoryMock.UpdateFunc: method is nil but Repository.Update was just called")
	}
	callInfo := struct {
		ID   int
		Book Book
	}{
		ID:   id,
		Book: book,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(id, book)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedRepository.UpdateCalls())
func (mock *RepositoryMock) UpdateCalls() []struct {
	ID   int
	Book Book
} {
	var calls []struct {
		ID   int
		Book Book
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
